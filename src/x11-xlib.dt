(module x11-xlib)

(import macros)
(import derivations)
(import variant)
(import enum)
(import bitset-enum)

(using-namespace std.macros
(def apply-list
  (fn (attr cto) extern (p DNode)
      ((mc (p MContext))
       (list (p DNode))
       (data (p void))
       (fun (p (fn (p DNode) ((mc (p MContext))
                              (node (p DNode))
                              (data (p void)))))))
    (let ((elt \ (fun mc list data)))
      (if (not (null (@:@ list next-node)))
        (let ((rest \ (@:@ (apply-list mc (@:@ list next-node) data fun) list-node)))
          (qq (uq elt) (uql rest)))
        (qq (uq elt))))))

(def arg-list-names (fn (attr cto) extern (p DNode) ((mc (p MContext)) (form (p DNode)))
  (and (not (= 0 (@:@ form is-list)))
    (and (= 0 (@:' form list-node is-list))
      (and (= 0 (strncmp (@:' form list-node token-str) "void" (cast 4 size)))
        ;; (= (@:' form list-node) (q void))
        (return (nullptr DNode)))))
  (let ((list \
         (apply-list mc (@:@ form list-node) (nullptr void)
           (fn (attr cto) (p DNode) ((mc (p MContext)) (form (p DNode)) (data (p void)))
             (if (= 0 (@:@ form is-list))
               form
               (@:@ form list-node))))))
    (@:@ list list-node))))

(def defc (macro extern (name linkage cname type args)
  (let ((arg-list \ (arg-list-names mc args))
        (fdef \ (if (null arg-list) (qq (uq cname))
                                    (qq (uq cname) (uql-nc arg-list)))))
    (qq do
      (def (uq cname) (fn extern-c (uq type) (uq args)))
      (def (uq name) (fn (uq linkage) (uq type) (uq args)
        (uq fdef)))))))

(def defc-multi (macro extern (name linkage def0 rest)
  (def list (var auto \ (get-varargs-list mc (- (arg-count mc) 3) rest)))
  (ignore assert (not (= 0 (@:@ def0 is-list))))
  (def defc (var auto \ (qq defc (uq name) (uq linkage) (uql (@:@ def0 list-node)))))
  (if (null list)
    defc
    (qq do
      (uq defc)
      (defc-multi (uq name) (uq linkage) (uql list))))))
)

(namespace x11
  (def Window      (macro extern (void) (q uint64)))
  (def Colormap    (macro extern (void) (q uint64)))
  (def BorderPixel (macro extern (void) (q uint64)))
  (def InputMask   (macro extern (void) (q int64)))
  (def Cursor      (macro extern (void) (q uint64)))
  (def Time        (macro extern (void) (q uint64)))
  (def XID         (macro extern (void) (q uint64)))
  (def Atom        (macro extern (void) (q uint64)))

  (def-bitset-enum KeyMask extern uint
    (UnusedMask
     ShiftMask LockMask ControlMask
     Mod1Mask Mod2Mask Mod3Mask Mod4Mask Mod5Mask))

  (def-bitset-enum InputEventMask extern uint
    (NoEventMask
     KeyPressMask KeyReleaseMask
     ButtonPressMask ButtonReleaseMask
     EnterWindowMask LeaveWindowMask
     PointerMotionMask PointerMotionHintMask
     Button1MotionMask Button2MotionMask
     Button3MotionMask Button4MotionMask
     Button5MotionMask ButtonMotionMask
     KeymapStateMask ExposureMask
     VisibilityChangeMask StructureNotifyMask
     ResizeRedirectMask SubstructureNotifyMask
     SubstructureRedirectMask FocusChangeMask
     PropertyChangeMask ColormapChangeMask
     OwnerGrabButtonMask))

  (def-enum Detail extern int
    (Above Below TopIf BottomIf Opposite))

  (def-bitset-enum CWValueMask extern uint64
    (CWUnused CWX CWY CWWidth CWHeight CWBorderWidth CWSibling CWStackMode))

  (def-enum RevertOption extern int
    (RevertToNone
     RevertToPointerRoot
     RevertToParent))

  (def-enum WindowMapState extern int
    (IsUnmapped
     IsUnviewable
     IsViewable))

  (def Screen (struct extern
    ((_unused (array-of 16 uint8))
     (root (Window))
     (width int)
     (height int)
     (mwidth int)
     (mheight int)
     (ndepths int)
     (depths (p void))
     (root-depth int)
     (root-visual (p void))
     (gc (p void))
     (colormap (Colormap))
     (white-pixel (BorderPixel))
     (black-pixel (BorderPixel))
     (max-maps int)
     (min-maps int)
     (backing-store int)
     (save-unders int)
     (root-input-mask (InputMask)))))

  (def Display (struct extern
    ((_unused (array-of 224 uint8))
     (default-screen int)
     (nscreens int)
     (screens (p Screen))
     (_unused2 (array-of 4440 uint8)))))

  (def WindowAttributes (struct extern
    ((x int)
     (y int)
     (width int)
     (height int)
     (border-width int)
     (depth int)
     (visual (p void))
     (root (Window))
     (class int)
     (bit-gravity int)
     (win-gravity int)
     (backing-store int)
     (backing-planes uint64)
     (backing-pixel uint64)
     (save-under int)
     (colormap (Colormap))
     (map-installed int)
     (map-state WindowMapState)
     (all-event-masks int64)
     (your-event-mask int64)
     (do-not-propagate-mask int64)
     (override-redirect int)
     (screen (p Screen)))))

  (def padding (struct intern ((a (array-of 188 char)))))
  (def client-message-data (struct intern ((a (array-of 5 uint64)))))

  (def-variant Event
    (Unused1
     Unused2
     (KeyPressEvent ((serial uint64)
                     (send-event int)
                     (display (p Display))
                     (window (Window))
                     (root (Window))
                     (subwindow (Window))
                     (time (Time))
                     (x int)
                     (y int)
                     (x-root int)
                     (y-root int)
                     (state KeyMask)
                     (keycode uint)
                     (same-screen int)))
     (KeyReleaseEvent ((serial uint64)
                       (send-event int)
                       (display (p Display))
                       (window (Window))
                       (root (Window))
                       (subwindow (Window))
                       (time (Time))
                       (x int)
                       (y int)
                       (x-root int)
                       (y-root int)
                       (state KeyMask)
                       (keycode uint)
                       (same-screen int)))
     (ButtonPressEvent ((serial uint64)
                        (send-event int)
                        (display (p Display))
                        (window (Window))
                        (root (Window))
                        (subwindow (Window))
                        (time (Time))
                        (x int)
                        (y int)
                        (x-root int)
                        (y-root int)
                        (state KeyMask)
                        (button uint)
                        (same-screen int)))
     (ButtonReleaseEvent ((serial uint64)
                          (send-event int)
                          (display (p Display))
                          (window (Window))
                          (root (Window))
                          (subwindow (Window))
                          (time (Time))
                          (x int)
                          (y int)
                          (x-root int)
                          (y-root int)
                          (state KeyMask)
                          (button uint)
                          (same-screen int)))
     MotionNotify
     (EnterWindowEvent ((serial uint64)
                        (send-event int)
                        (display (p Display))
                        (window (Window))
                        (root (Window))
                        (subwindow (Window))
                        (time (Time))
                        (x int)
                        (y int)
                        (x-root int)
                        (y-root int)
                        (mode int)
                        (detail int)
                        (same-screen int)
                        (focus int)
                        (state KeyMask)))
     LeaveNotify
     FocusIn
     FocusOut
     KeymapNotify
     Expose
     GraphicsExpose
     NoExpose
     VisibilityNotify
     CreateNotify
     (DestroyWindowEvent ((serial uint64)
                          (send-event int)
                          (display (p Display))
                          (event (Window))
                          (window (Window))))
     UnmapNotify
     (MapNotifyEvent ((serial uint64)
                      (send-event int)
                      (display (p Display))
                      (event (Window))
                      (window (Window))
                      (override-redirect int)))
     (MapRequestEvent ((serial uint64)
                       (send-event int)
                       (display (p Display))
                       (event (Window))
                       (window (Window))))
     ReparentNotify
     ConfigureNotifyEvent
     (ConfigureRequestEvent ((serial uint64)
                             (send-event int)
                             (display (p Display))
                             (parent (Window))
                             (window (Window))
                             (x int)
                             (y int)
                             (width int)
                             (height int)
                             (border-width int)
                             (above (Window))
                             (detail Detail)
                             (value-mask CWValueMask)))
     GravityNotify
     ResizeRequest
     CirculateNotify
     CirculateRequest
     PropertyNotify
     SelectionClear
     SelectionRequest
     SelectionNotify
     ColormapNotify
     ClientMessage
     MappingNotify
     (GenericEvent ((_unused padding)))))

  (def WindowChanges (struct extern
    ((x int)
     (y int)
     (width int)
     (height int)
     (border-width int)
     (sibling (Window))
     (stack-mode int))))

  (def ErrorEvent (struct extern
    ((type int)
     (display (p Display))
     (resourceid (XID))
     (serial uint64)
     (error-code uint64)
     (request-code uint64)
     (minor-code uint64))))

  (def ClientMessageEvent (struct extern
    ((type int)
     (serial uint64)
     (send-event int)
     (display (p Display))
     (window (Window))
     (message-type (Atom))
     (format int)
     (data (array-of 5 uint64)))))

  (def grab-mode-async   (var extern int    1))
  (def owner-events-true (var extern int    1))
  (def current-time      (var extern uint64 0))

  (def enter-notify   (var extern int (value (@: (EnterWindowEvent) type))))
  (def map-notify     (var extern int (value (@: (MapNotifyEvent) type))))
  (def client-message (var extern int (value (@: (ClientMessage) type))))

  (def none              (var extern int 0))
  (def no-window         (var extern (Window) 0))
  (def pointer-root      (var extern (Window) 1))
  (def no-cursor         (var extern (Cursor) 0))

  (defc open-display
    extern XOpenDisplay (p Display) ((n (p (const char)))))

  (def default-screen
    (fn extern int ((dpy (p Display)))
      (@:@ dpy default-screen)))

  (def screen-of-display
    (fn extern (p Screen) ((dpy (p Display))
                           (scr int))
      ($ (@:@ dpy screens) scr)))

  (def default-root-window
    (fn extern (Window) ((dpy (p Display)))
      (@:@ (screen-of-display dpy (default-screen dpy)) root)))

  (def black-pixel
    (fn extern (BorderPixel) ((dpy (p Display)))
      (@:@ (screen-of-display dpy (default-screen dpy)) black-pixel)))

  (def white-pixel
    (fn extern (BorderPixel) ((dpy (p Display)))
      (@:@ (screen-of-display dpy (default-screen dpy)) white-pixel)))

  (defc string-to-keysym
    extern XStringToKeysym uint ((str (p (const char)))))

  (defc keysym-to-keycode
    extern XKeysymToKeycode uint ((dpy (p Display)) (keysym uint)))

  (defc grab-key
    extern XGrabKey void ((dpy (p Display))
                     (keycode uint)
                     (modifiers KeyMask)
                     (grab-window (Window))
                     (owner-events int)
                     (pointer-mode int)
                     (keyboard-mode int)))

  (defc grab-button
     extern XGrabButton void ((dpy (p Display))
                     (button int)
                     (modifiers uint)
                     (grab-window (Window))
                     (owner-events int)
                     (event-mask uint)
                     (pointer-mode int)
                     (keyboard-mode int)
                     (confine-to (Window))
                     (cursor (Cursor))))

  (defc grab-pointer
    extern XGrabPointer void ((dpy (p Display))
                     (grab-window (Window))
                     (owner-events int)
                     (event-mask uint)
                     (pointer-mode int)
                     (keyboard-mode int)
                     (confine-to (Window))
                     (cursor (Cursor))
                     (time (Time))))

  (defc check-typed-event
    extern XCheckTypedEvent bool ((dpy (p Display))
                     (event-type int)
                     (event-return (p Event))))

  (defc move-resize-window
    extern XMoveResizeWindow void ((dpy (p Display))
                     (w (Window))
                     (x int)
                     (y int)
                     (width uint)
                     (height uint)))

  (defc raise-window
    extern XRaiseWindow void ((dpy (p Display))
                     (w (Window))))

  (defc lower-window
    extern XLowerWindow void ((dpy (p Display))
                     (w (Window))))

  (defc get-window-attributes
    extern XGetWindowAttributes void ((dpy (p Display))
                     (w (Window))
                     (window-attributes-return (p WindowAttributes))))

  (defc next-event
    extern XNextEvent void ((dpy (p Display))
                     (event-return (p Event))))

  (defc select-input
    extern XSelectInput void ((dpy (p Display))
                     (w (Window))
                     (event-mask InputEventMask)))

  (defc set-input-focus
    extern XSetInputFocus void ((dpy (p Display))
                     (focus (Window))
                     (revert-to RevertOption)
                     (time (Time))))

  (defc get-input-focus
    extern XGetInputFocus void ((dpy (p Display))
                     (focus-return (p (Window)))
                     (revert-to-return (p RevertOption))))

  (defc query-tree
    extern XQueryTree int ((dpy (p Display))
                    (w (Window))
                    (root-return (p (Window)))
                    (parent-return (p (Window)))
                    (children-return (p (p (Window))))
                    (nchildren-return (p uint))))

  (defc destroy-window
    extern XDestroyWindow void ((dpy (p Display))
                     (w (Window))))

  (defc map-window
    extern XMapWindow void ((dpy (p Display))
                     (w (Window))))

  (defc unmap-window
    extern XUnmapWindow void ((dpy (p Display))
                     (w (Window))))

  (defc get-geometry
    extern XGetGeometry int ((dpy (p Display))
                    (d (Window))
                    (root-return (p (Window)))
                    (x-return (p int))
                    (y-return (p int))
                    (width-return (p uint))
                    (height-return (p uint))
                    (border-width-return (p uint))
                    (depth-return (p uint))))

  (defc set-window-border
    extern XSetWindowBorder void ((dpy (p Display))
                     (w (Window))
                     (border-pixel (BorderPixel))))

  (defc configure-window
    extern XConfigureWindow void ((dpy (p Display))
                     (w (Window))
                     (value-mask CWValueMask)
                     (values (p WindowChanges))))

  (defc ungrab-pointer
    extern XUngrabPointer int ((dpy (p Display))
                    (time (Time))))

  (defc set-error-handler
    extern XSetErrorHandler (p (fn int ((display (p Display))
                           (ev-error (p ErrorEvent)))))
      ((handler (p (fn int ((display (p Display))
                            (ev-error (p ErrorEvent))))))))

  (defc get-wm-protocols
    extern XGetWMProtocols int ((dpy (p Display))
                    (w (Window))
                    (protocols-return (p (p (Atom))))
                    (count-return (p int))))

  (defc intern-atom
    extern XInternAtom (Atom) ((dpy (p Display))
                       (atom-name (p (const char)))
                       (only-if-exists bool)))

  (defc get-atom-name
    extern XGetAtomName (p (const char)) ((dpy (p Display))
                                 (atom (Atom))))

  (defc send-event
    extern XSendEvent int ((dpy (p Display))
                    (w (Window))
                    (propagate bool)
                    (event-mask int64)
                    (event-send (p Event)))))

